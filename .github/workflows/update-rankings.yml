name: Update Rankings

on:
  schedule:
    - cron: '0 0 * * *'  # every day at midnight
  workflow_dispatch:

permissions:
  contents: write

jobs:
  detect-and-rank:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Detect League and Season
        run: |
          TEAM_ID=$(cat ./assets/teamid.txt)
          MONTH=$(date +%m)
          YEAR=$(date +%Y)

          if [ "$MONTH" -lt 8 ]; then
            SEASON=$((YEAR - 1))
          else
            SEASON=$YEAR
          fi

          echo "📅 Using season: $SEASON"
          mkdir -p tmp

          # Fetch team standings to detect league
          response=$(curl -s --request GET \
            --url "https://api-football-v1.p.rapidapi.com/v3/standings?season=${SEASON}&team=${TEAM_ID}" \
            --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
            --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com")

          echo "$response" | jq . > tmp/team-response.json

          LEAGUE_ID=$(echo "$response" | jq -r '.response[0].league.id')

          if [ -z "$LEAGUE_ID" ] || [ "$LEAGUE_ID" = "null" ]; then
            echo "❌ Could not determine league ID. Exiting."
            cat tmp/team-response.json
            exit 1
          fi

          echo "✅ Detected League ID: $LEAGUE_ID"
          echo "LEAGUE_ID=$LEAGUE_ID" >> $GITHUB_ENV
          echo "SEASON=$SEASON" >> $GITHUB_ENV
          echo "TEAM_ID=$TEAM_ID" >> $GITHUB_ENV

      - name: Fetch Last Season Standings for 3 Leagues
        run: |
          LAST_SEASON=$((SEASON - 1))
          ABOVE=$((LEAGUE_ID - 1))
          BELOW=$((LEAGUE_ID + 1))

          mkdir -p data/previous-season

          for LID in $LEAGUE_ID $ABOVE $BELOW; do
            echo "Fetching last season standings for league $LID"
            RESPONSE=$(curl -s --request GET \
              --url "https://api-football-v1.p.rapidapi.com/v3/standings?season=${LAST_SEASON}&league=${LID}" \
              --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
              --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com")

            echo "$RESPONSE" | jq . > "data/previous-season/league-${LID}.json"
          done

          echo "{\"league_id\": $LEAGUE_ID, \"season\": $SEASON}" > data/league-info.json

      - name: Fetch Upcoming Fixtures for Team
        run: |
          START_DATE=$(date -d "+0 days" +%Y-%m-%d)
          END_DATE=$(date -d "+14 days" +%Y-%m-%d)

          FIXTURES=$(curl -s --request GET \
            --url "https://api-football-v1.p.rapidapi.com/v3/fixtures?league=${LEAGUE_ID}&season=${SEASON}&from=${START_DATE}&to=${END_DATE}" \
            --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
            --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com")

          echo "$FIXTURES" | jq . > tmp/fixtures.json

          jq -n --slurpfile f tmp/fixtures.json '
            ($f[0].response // [])
            | map(select(.teams.home.id == ($env.TEAM_ID|tonumber) or .teams.away.id == ($env.TEAM_ID|tonumber)))
            | sort_by(.fixture.date)
            | reduce .[] as $fx ({}; 
                . + {
                  ($fx.teams.home.id|tostring): {nextUp: "\($fx.teams.away.name) (H)"},
                  ($fx.teams.away.id|tostring): {nextUp: "\($fx.teams.home.name) (A)"}
                }
              )
          ' > tmp/next-fixtures-map.json

      - name: Generate ICS for Team
        run: |
          ICS_FILE=public/cal/fixtures.ics
          TEAM_ID=$(cat ./assets/teamid.txt)

          echo "BEGIN:VCALENDAR
          VERSION:2.0
          PRODID:-//GitHub Actions//Football Fixtures//EN" > $ICS_FILE

          jq -c --arg team "$TEAM_ID" '
            .response[0].league.standings[0]
            | map(select(.team.id == ($team|tonumber))) 
            | .[] 
            | .team.id as $tid
            | ($tid | tostring) as $tid_str
          ' tmp/team-response.json | while IFS= read -r team_data; do
            # For each fixture
            jq -c --arg team "$TEAM_ID" '
              .response[]
              | select(.teams.home.id == ($team|tonumber) or .teams.away.id == ($team|tonumber))
            ' tmp/fixtures.json | while IFS= read -r fx; do
              DATE=$(echo "$fx" | jq -r '.fixture.date')
              HOME=$(echo "$fx" | jq -r '.teams.home.name')
              AWAY=$(echo "$fx" | jq -r '.teams.away.name')
              HOME_SCORE=$(echo "$fx" | jq -r '.goals.home // ""')
              AWAY_SCORE=$(echo "$fx" | jq -r '.goals.away // ""')
              VENUE=$(echo "$fx" | jq -r '.fixture.venue.name')

              if [ -n "$HOME_SCORE" ] && [ -n "$AWAY_SCORE" ]; then
                SUMMARY="$HOME $HOME_SCORE - $AWAY_SCORE $AWAY"
              else
                SUMMARY="$HOME - $AWAY"
              fi

              echo "BEGIN:VEVENT
              DTSTART:$DATE
              SUMMARY:$SUMMARY
              LOCATION:$VENUE
              END:VEVENT" >> $ICS_FILE
            done
          done

          echo "END:VCALENDAR" >> $ICS_FILE

      - name: Commit and Push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add data/league-info.json data/previous-season/ tmp/fixtures.json tmp/next-fixtures-map.json public/cal/fixtures.ics
          if git diff --cached --quiet; then
            echo "🟢 No changes to commit."
          else
            git commit -m "Update league info, fixtures, next fixtures map, and ICS"
            git push
