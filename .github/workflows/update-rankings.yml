name: Update Rankings

on:
  schedule:
    - cron: '0 0 * * *'  # every day at midnight
  workflow_dispatch:

permissions:
  contents: write

jobs:
  detect-and-rank:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Detect League and Season
        run: |
          TEAM_ID=$(cat ./assets/teamid.txt)
          MONTH=$(date +%m)
          YEAR=$(date +%Y)

          if [ "$MONTH" -lt 8 ]; then
            SEASON=$((YEAR - 1))
          else
            SEASON=$YEAR
          fi

          echo "📅 Using season: $SEASON"
          mkdir -p tmp

          response=$(curl -s --request GET \
            --url "https://api-football-v1.p.rapidapi.com/v3/standings?season=${SEASON}&team=${TEAM_ID}" \
            --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
            --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com")

          echo "$response" | jq . > tmp/team-response.json

          LEAGUE_ID=$(echo "$response" | jq -r '.response[0].league.id')

          if [ "$LEAGUE_ID" = "null" ] || [ -z "$LEAGUE_ID" ]; then
            echo "❌ Could not determine league ID. Exiting."
            cat tmp/team-response.json
            exit 1
          fi

          echo "✅ Detected League ID: $LEAGUE_ID"
          echo "LEAGUE_ID=$LEAGUE_ID" >> $GITHUB_ENV
          echo "SEASON=$SEASON" >> $GITHUB_ENV

      - name: Fetch Last Season Standings for 3 Leagues
        run: |
          LAST_SEASON=$((SEASON - 1))
          ABOVE=$((LEAGUE_ID - 1))
          BELOW=$((LEAGUE_ID + 1))

          mkdir -p data/previous-season

          for LID in $LEAGUE_ID $ABOVE $BELOW; do
            echo "Fetching last season standings for league $LID"
            RESPONSE=$(curl -s --request GET \
              --url "https://api-football-v1.p.rapidapi.com/v3/standings?season=${LAST_SEASON}&league=${LID}" \
              --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
              --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com")

            echo "$RESPONSE" | jq . > "data/previous-season/league-${LID}.json"
          done

          echo "{\"league_id\": $LEAGUE_ID, \"season\": $SEASON}" > data/league-info.json

      - name: Fetch Fixtures and Build ICS
        run: |
          mkdir -p public/cal
          TMP_ICS=$(mktemp)

          FIXTURES=$(curl -s --request GET \
            --url "https://api-football-v1.p.rapidapi.com/v3/fixtures?season=${SEASON}&team=${TEAM_ID}" \
            --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
            --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com")

          echo "$FIXTURES" | jq . > tmp/fixtures.json

          # Start ICS
          echo "BEGIN:VCALENDAR" > "$TMP_ICS"
          echo "VERSION:2.0" >> "$TMP_ICS"
          echo "PRODID:-//GitHub Actions//Football Fixtures//EN" >> "$TMP_ICS"

          # Loop fixtures sorted by date
          echo "$FIXTURES" | jq -c '.response | sort_by(.fixture.date)[]' | while read -r match; do
            ID=$(echo "$match" | jq -r '.fixture.id')
            DATE=$(echo "$match" | jq -r '.fixture.date')
            STADIUM=$(echo "$match" | jq -r '.fixture.venue.name')
            STATUS=$(echo "$match" | jq -r '.fixture.status.short')
            HOME=$(echo "$match" | jq -r '.teams.home.name')
            AWAY=$(echo "$match" | jq -r '.teams.away.name')
            HGOALS=$(echo "$match" | jq -r '.goals.home')
            AGOALS=$(echo "$match" | jq -r '.goals.away')
            LEAGUE=$(echo "$match" | jq -r '.league.name')
            ROUND=$(echo "$match" | jq -r '.league.round')
            KICKOFF=$(echo "$match" | jq -r '.fixture.date')

            DTSTART=$(date -u -d "$DATE" +"%Y%m%dT%H%M%SZ")

            if [ "$STATUS" = "FT" ]; then
              SUMMARY="$HOME $HGOALS - $AGOALS $AWAY"
            else
              SUMMARY="$HOME - $AWAY"
            fi

            DESCRIPTION="Status: $STATUS\nKickoff: $KICKOFF\nLeague: $LEAGUE\nRound: $ROUND"

            echo "BEGIN:VEVENT" >> "$TMP_ICS"
            echo "UID:$ID@fixtures" >> "$TMP_ICS"
            echo "DTSTAMP:$(date -u +"%Y%m%dT%H%M%SZ")" >> "$TMP_ICS"
            echo "DTSTART:$DTSTART" >> "$TMP_ICS"
            echo "SUMMARY:$SUMMARY" >> "$TMP_ICS"
            echo "DESCRIPTION:$DESCRIPTION" >> "$TMP_ICS"
            if [ "$STADIUM" != "null" ]; then
              echo "LOCATION:$STADIUM" >> "$TMP_ICS"
            fi
            echo "END:VEVENT" >> "$TMP_ICS"
          done

          echo "END:VCALENDAR" >> "$TMP_ICS"

          # Only overwrite if changed
          if ! cmp -s "$TMP_ICS" public/cal/fixtures.ics; then
            mv "$TMP_ICS" public/cal/fixtures.ics
            echo "ICS updated"
          else
            echo "No changes in ICS"
            rm "$TMP_ICS"
          fi

      - name: Commit and Push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add data/league-info.json data/previous-season/ public/cal/fixtures.ics
          if git diff --cached --quiet; then
            echo "🟢 No changes to commit."
          else
            git commit -m "Update league info, previous season standings, and team ICS"
            git push
          fi
