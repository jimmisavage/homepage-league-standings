name: Update Rankings

on:
  schedule:
    - cron: '0 0 * * *'  # every day at midnight
  workflow_dispatch:

permissions:
  contents: write

jobs:
  detect-and-rank:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Detect League and Season
        run: |
          TEAM_ID=$(cat ./assets/teamid.txt)
          MONTH=$(date +%m)
          YEAR=$(date +%Y)

          if [ "$MONTH" -lt 8 ]; then
            SEASON=$((YEAR - 1))
          else
            SEASON=$YEAR
          fi

          echo "📅 Using season: $SEASON"
          mkdir -p tmp

          response=$(curl -s --request GET \
            --url "https://api-football-v1.p.rapidapi.com/v3/standings?season=${SEASON}&team=${TEAM_ID}" \
            --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
            --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com")

          echo "$response" | jq . > tmp/team-response.json

          LEAGUE_ID=$(echo "$response" | jq -r '.response[0].league.id')

          if [ "$LEAGUE_ID" = "null" ] || [ -z "$LEAGUE_ID" ]; then
            echo "❌ Could not determine league ID. Exiting."
            cat tmp/team-response.json
            exit 1
          fi

          echo "✅ Detected League ID: $LEAGUE_ID"
          echo "LEAGUE_ID=$LEAGUE_ID" >> $GITHUB_ENV
          echo "SEASON=$SEASON" >> $GITHUB_ENV

      - name: Fetch Last Season Standings for 3 Leagues
        run: |
          LAST_SEASON=$((SEASON - 1))
          ABOVE=$((LEAGUE_ID - 1))
          BELOW=$((LEAGUE_ID + 1))

          mkdir -p data/previous-season

          for LID in $LEAGUE_ID $ABOVE $BELOW; do
            echo "Fetching last season standings for league $LID"
            RESPONSE=$(curl -s --request GET \
              --url "https://api-football-v1.p.rapidapi.com/v3/standings?season=${LAST_SEASON}&league=${LID}" \
              --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
              --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com")

            echo "$RESPONSE" | jq . > "data/previous-season/league-${LID}.json"
          done

          echo "{\"league_id\": $LEAGUE_ID, \"season\": $SEASON}" > data/league-info.json

      - name: Fetch Upcoming Fixtures for Team
        run: |
          START_DATE=$(date -d "+0 days" +%Y-%m-%d)
          END_DATE=$(date -d "+365 days" +%Y-%m-%d)  # full season
          TEAM_ID=$(cat ./assets/teamid.txt)

          FIXTURES=$(curl -s --request GET \
            --url "https://api-football-v1.p.rapidapi.com/v3/fixtures?team=${TEAM_ID}&season=${SEASON}" \
            --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
            --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com")

          echo "$FIXTURES" | jq . > tmp/fixtures.json

          # Map next fixture for the team
          jq -n --slurpfile f tmp/fixtures.json '
            if ($f[0].response | length) == 0 then
              {"TBD": {nextUp: "TBD"}}
            else
              $f[0].response
              | sort_by(.fixture.date)
              | reduce .[] as $fx ({}; . +
                  {
                    ($fx.teams.home.id|tostring):
                      (if has($fx.teams.home.id|tostring) then .[$fx.teams.home.id|tostring] else {nextUp: "\($fx.teams.away.name) (H)"} end),
                    ($fx.teams.away.id|tostring):
                      (if has($fx.teams.away.id|tostring) then .[$fx.teams.away.id|tostring] else {nextUp: "\($fx.teams.home.name) (A)"} end)
                  }
                )
            end
          ' > tmp/next-fixtures-map.json

      - name: Generate ICS for Team
        run: |
          ICS_FILE=public/cal/fixtures.ics
          TEAM_ID=$(cat ./assets/teamid.txt)
          mkdir -p public/cal

          # Start calendar safely with echo (YAML-safe)
          echo "BEGIN:VCALENDAR" > $ICS_FILE
          echo "VERSION:2.0" >> $ICS_FILE
          echo "PRODID:-//GitHub Actions//Football Fixtures//EN" >> $ICS_FILE

          # Append events for each fixture
          jq -r --arg team_id "$TEAM_ID" '
            .response[]
            | select(.teams.home.id == ($team_id|tonumber) or .teams.away.id == ($team_id|tonumber))
            | . as $fx
            | (
                $fx.fixture.date
                | split("T")
                | .[0] + "T" + .[1]
                | split("+")[0]
                | split("-")
                | join("")
              ) as $dt
            | "BEGIN:VEVENT\nUID:\($fx.fixture.id)@\($fx.league.id).football\nDTSTAMP:" + (now|strftime("%Y%m%dT%H%M%SZ")) +
              "\nDTSTART:" + $dt +
              "\nSUMMARY:" + (
                if $fx.teams.home.id == ($team_id|tonumber) then
                  "\($fx.teams.home.name)" +
                  (if $fx.fixture.status.short=="FT" then " \($fx.goals.home)-\($fx.goals.away)" else "" end) +
                  " vs \($fx.teams.away.name)"
                else
                  "\($fx.teams.away.name)" +
                  (if $fx.fixture.status.short=="FT" then " \($fx.goals.away)-\($fx.goals.home)" else "" end) +
                  " @ \($fx.teams.home.name)"
                end
              ) +
              "\nLOCATION:" + ($fx.fixture.venue.name // "Unknown") +
              "\nEND:VEVENT"
          ' tmp/fixtures.json >> $ICS_FILE

          echo "END:VCALENDAR" >> $ICS_FILE

      - name: Commit and Push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add data/league-info.json data/previous-season/ public/cal/fixtures.ics
          if git diff --cached --quiet; then
            echo "🟢 No changes to commit."
          else
            git commit -m "Update rankings, next fixture, and ICS calendar"
            git push
