# This workflow scrapes the BBC Sport website for football standings and fixtures.

name: Update Rankings (BBC Scraper)

on:
  schedule:
    - cron: '0 0 * * *' # every day at midnight
  workflow_dispatch:

permissions:
  contents: write

jobs:
  scrape-and-rank:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Install pup (HTML Parser)
        # pup is a powerful command-line HTML parser
        run: sudo apt-get update && sudo apt-get install -y pup

      - name: Load Configuration Variables
        # Loads variables like TEAM_SLUG, LEAGUE_SLUG, etc., from config.env
        run: |
          if [ -f config.env ]; then
            source config.env
            echo "TEAM_SLUG=$TEAM_SLUG" >> $GITHUB_ENV
            echo "LEAGUE_SLUG=$LEAGUE_SLUG" >> $GITHUB_ENV
            echo "LEAGUE_NAME=$LEAGUE_NAME" >> $GITHUB_ENV
            echo "CURRENT_SEASON=$CURRENT_SEASON" >> $GITHUB_ENV
            echo "✅ Loaded config variables."
          else
            echo "❌ ERROR: config.env not found. Please create it and set variables."
            exit 1
          fi

      - name: Scrape Standings Table (Current League)
        # Scrapes the BBC table and uses 'pup' to output clean JSON structure
        run: |
          mkdir -p tmp data

          STANDINGS_URL="https://www.bbc.co.uk/sport/football/${LEAGUE_SLUG}/table"
          echo "🌐 Scraping standings from: $STANDINGS_URL"

          # Fetch HTML and use pup to target the main standings table rows
          # We extract the entire row content and convert it to JSON structure
          curl -s "$STANDINGS_URL" | pup 'table.ssrcss-1q3n90n-Table.exw0g190 tr.ssrcss-1hplq7p-TableRow.exw0g191:not(.ssrcss-1b7736g-HeaderRow.exw0g192) json{}' > tmp/scraped-standings-raw.json

          if [ ! -s tmp/scraped-standings-raw.json ]; then
            echo "❌ Scraping failed or returned empty data. Check if the LEAGUE_SLUG is correct or if BBC updated their HTML."
            exit 1
          fi

      - name: Format Standings Data
        # Uses JQ to process the raw scraped JSON into a clean output format
        run: |
          TEAM_SLUG="${{ env.TEAM_SLUG }}"

          jq -r --arg teamSlug "$TEAM_SLUG" '
            [
              .[] |
              .children |
              # Create a map of column headers to their corresponding cell content for easier parsing
              {
                "rank": .[0].children[0].children[0].text, # Rank (1)
                "team_name": .[1].children[0].children[1].children[0].text, # Team Name (Cardiff City)
                "team_slug": .[1].children[0].children[1].attributes.href | split("/")[-1], # Team Slug (cardiff-city)
                "played": .[2].text,
                "won": .[3].text,
                "drawn": .[4].text,
                "lost": .[5].text,
                "goals_for": .[6].text,
                "goals_against": .[7].text,
                "goal_difference": .[8].text,
                "points": .[9].text,
                "highlight": (if .[1].children[0].children[1].attributes.href | split("/")[-1] == $teamSlug then true else false end)
              }
            ]
          ' tmp/scraped-standings-raw.json > data/standings.json

          # Save league info (now used from config)
          echo "{\"league_name\": \"${{ env.LEAGUE_NAME }}\", \"season\": \"${{ env.CURRENT_SEASON }}\"}" > data/league-info.json
          
          echo "✅ Standings data generated in data/standings.json"

      - name: Commit and Push Standings
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add data/standings.json data/league-info.json
          if git diff --cached --quiet; then
            echo "🟢 No changes to commit."
          else
            git commit -m "Scraper: Update current standings for ${{ env.LEAGUE_NAME }} (${{ env.CURRENT_SEASON }})"
            git push
          fi
