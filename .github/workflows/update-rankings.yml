name: Update Rankings

on:
  schedule:
    - cron: '0 0 * * *' # every day at midnight
  workflow_dispatch:

permissions:
  contents: write

jobs:
  detect-and-rank:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Detect League and Season
        run: |
          TEAM_ID=$(cat ./assets/teamid.txt)
          
          MONTH=$(date +%m)
          YEAR=$(date +%Y)
          # Determine the current football season (runs Aug to May)
          if [ "$MONTH" -lt 8 ]; then
            SEASON=$((YEAR - 1))
          else
            SEASON=$YEAR
          fi
          echo "📅 Using season: $SEASON"
          
          mkdir -p tmp
          
          # --- CORRECTED API CALL: New URL and Debugging ---
          # Corrected URL to use the official API-Sports domain: v3.football.api-sports.io
          # Header changed to x-apisports-key
          
          # Use a temporary file to separate the body from the status code in one curl call
          HTTP_RESPONSE=$(curl -s -o tmp/api-body.json -w "%{http_code}" \
            --request GET \
            --url "https://v3.football.api-sports.io/standings?season=${SEASON}&team=${TEAM_ID}" \
            --header "x-apisports-key: ${{ secrets.API_FOOTBALL_KEY }}" \
            --header "User-Agent: GitHub-Actions-Workflow/1.0")

          # Check if the output file is empty (curl might fail before writing)
          if [ ! -s tmp/api-body.json ]; then
            echo "-------------------------------------"
            echo "🚨 DEBUG INFO START 🚨"
            echo "HTTP Status Code: $HTTP_RESPONSE (This may be empty if connection failed early)"
            echo "Response Body (tmp/team-response.json): FILE IS EMPTY OR CURL FAILED."
            echo "🚨 DEBUG INFO END 🚨"
            echo "-------------------------------------"
            echo "❌ Connection failed or API returned no data. Check your API_FOOTBALL_KEY or team ID."
            exit 1 # Exit with 1 if file is empty
          fi
          
          # Rename the body file for the original jq command
          mv tmp/api-body.json tmp/team-response.json
          
          echo "-------------------------------------"
          echo "🚨 DEBUG INFO START 🚨"
          echo "HTTP Status Code: $HTTP_RESPONSE"
          echo "Response Body (tmp/team-response.json):"
          cat tmp/team-response.json
          echo "🚨 DEBUG INFO END 🚨"
          echo "-------------------------------------"
          
          # Continue processing the response body
          response=$(cat tmp/team-response.json)
          LEAGUE_ID=$(echo "$response" | jq -r '.response[0].league.id')
          
          if [ -z "$LEAGUE_ID" ] || [ "$LEAGUE_ID" = "null" ]; then
            echo "❌ Could not determine league ID. Exiting."
            cat tmp/team-response.json
            exit 1
          fi
          
          echo "✅ Detected League ID: $LEAGUE_ID"
          echo "LEAGUE_ID=$LEAGUE_ID" >> $GITHUB_ENV
          echo "SEASON=$SEASON" >> $GITHUB_ENV

      - name: Fetch Last Season Standings for 3 Leagues
        run: |
          LAST_SEASON=$((SEASON - 1))
          ABOVE=$((LEAGUE_ID - 1))
          BELOW=$((LEAGUE_ID + 1))

          mkdir -p data/previous-season

          for LID in $LEAGUE_ID $ABOVE $BELOW; do
            echo "Fetching last season standings for league $LID"
            RESPONSE=$(curl -s --request GET \
              --url "https://v3.football.api-sports.io/standings?season=${LAST_SEASON}&league=${LID}" \
              --header "x-apisports-key: ${{ secrets.API_FOOTBALL_KEY }}" \
              --header "User-Agent: GitHub-Actions-Workflow/1.0")
            echo "$RESPONSE" | jq . > "data/previous-season/league-${LID}.json"
          done

          echo "{\"league_id\": $LEAGUE_ID, \"season\": $SEASON}" > data/league-info.json

      - name: Fetch All Fixtures for Team
        run: |
          TEAM_ID=$(cat ./assets/teamid.txt)
          FIXTURES=$(curl -s --request GET \
            --url "https://v3.football.api-sports.io/fixtures?team=${TEAM_ID}&season=${SEASON}" \
            --header "x-apisports-key: ${{ secrets.API_FOOTBALL_KEY }}" \
            --header "User-Agent: GitHub-Actions-Workflow/1.0")
          echo "$FIXTURES" | jq . > tmp/fixtures.json

      - name: Generate ICS for Team
        run: |
          ICS_FILE=public/cal/fixtures.ics
          mkdir -p public/cal

          # List of league IDs to treat as regular league games
          # Replace these IDs with your actual league IDs for Premier League, Championship, etc.
          LEAGUE_IDS="39 40 41 42 43 44"

          # Start calendar
          echo "BEGIN:VCALENDAR" > $ICS_FILE
          echo "VERSION:2.0" >> $ICS_FILE
          echo "PRODID:-//GitHub Actions//Football Fixtures//EN" >> $ICS_FILE

          jq -r --arg leagues "$LEAGUE_IDS" '
            .response[]
            | . as $fx
            | ($fx.fixture.date | sub("\\+00:00$"; "Z") | fromdate) as $start_ts
            | ($start_ts | strftime("%Y%m%dT%H%M%SZ")) as $dtstart_fmt
            | ($start_ts + 7200 | strftime("%Y%m%dT%H%M%SZ")) as $dtend_fmt
            | ($leagues | split(" ")) as $league_list
            | "BEGIN:VEVENT\nUID:\($fx.fixture.id)@\($fx.league.id).football"
              + "\nDTSTAMP:" + (now|strftime("%Y%m%dT%H%M%SZ"))
              + "\nDTSTART:" + $dtstart_fmt
              + "\nDTEND:" + $dtend_fmt
              + "\nSUMMARY:" +
                ( $fx.teams.home.name
                  + (if $fx.fixture.status.short=="FT"
                    then " \($fx.goals.home) v \($fx.goals.away) "
                    else " v "
                  end)
                  + $fx.teams.away.name
                )
                + (if ($fx.league.id | tostring) as $id
                    | ($league_list | index($id)) | not
                  then " (\($fx.league.name))"
                  else ""
                end)
              + "\nDESCRIPTION:" + ("Referee: " + ($fx.fixture.referee // "TBD"))
              + "\nLOCATION:" + ($fx.fixture.venue.name // "Unknown")
              + "\nEND:VEVENT"
          ' tmp/fixtures.json >> $ICS_FILE

          echo "END:VCALENDAR" >> $ICS_FILE

      - name: Commit and Push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add data/league-info.json data/previous-season/ public/cal/fixtures.ics
          if git diff --cached --quiet; then
            echo "🟢 No changes to commit."
          else
            git commit -m "Update league info, standings, and team fixtures"
            git push
          fi
