name: Update Rankings

on:
  schedule:
    - cron: '0 0 * * *'  # every day at midnight
  workflow_dispatch:

permissions:
  contents: write

jobs:
  detect-and-rank:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Detect League and Season
        run: |
          TEAM_ID=$(cat ./assets/teamid.txt)
          MONTH=$(date +%m)
          YEAR=$(date +%Y)

          if [ "$MONTH" -lt 8 ]; then
            SEASON=$((YEAR - 1))
          else
            SEASON=$YEAR
          fi

          echo "📅 Using season: $SEASON"
          mkdir -p tmp

          response=$(curl -s --request GET \
            --url "https://api-football-v1.p.rapidapi.com/v3/standings?season=${SEASON}&team=${TEAM_ID}" \
            --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
            --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com")

          echo "$response" | jq . > tmp/team-response.json

          LEAGUE_ID=$(echo "$response" | jq -r '.response[0].league.id')

          if [ "$LEAGUE_ID" = "null" ] || [ -z "$LEAGUE_ID" ]; then
            echo "❌ Could not determine league ID. Exiting."
            cat tmp/team-response.json
            exit 1
          fi

          echo "✅ Detected League ID: $LEAGUE_ID"
          echo "LEAGUE_ID=$LEAGUE_ID" >> $GITHUB_ENV
          echo "SEASON=$SEASON" >> $GITHUB_ENV

      - name: Fetch Last Season Standings for 3 Leagues
        run: |
          LAST_SEASON=$((SEASON - 1))
          ABOVE=$((LEAGUE_ID - 1))
          BELOW=$((LEAGUE_ID + 1))

          mkdir -p data/previous-season

          for LID in $LEAGUE_ID $ABOVE $BELOW; do
            echo "Fetching last season standings for league $LID"
            RESPONSE=$(curl -s --request GET \
              --url "https://api-football-v1.p.rapidapi.com/v3/standings?season=${LAST_SEASON}&league=${LID}" \
              --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
              --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com")

            echo "$RESPONSE" | jq . > "data/previous-season/league-${LID}.json"
          done

          echo "{\"league_id\": $LEAGUE_ID, \"season\": $SEASON}" > data/league-info.json

      - name: Fetch Season Fixtures
        run: |
          START_DATE=$(date +%Y-%m-%d)
          END_DATE=$(date -d "next July" +%Y-%m-%d) # full season
          
          FIXTURES=$(curl -s --request GET \
            --url "https://api-football-v1.p.rapidapi.com/v3/fixtures?league=${LEAGUE_ID}&season=${SEASON}&from=${START_DATE}&to=${END_DATE}" \
            --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
            --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com")

          echo "$FIXTURES" | jq . > tmp/fixtures.json

      - name: Generate ICS for Team
        run: |
          ICS_FILE=public/cal/fixtures.ics
          TEAM_ID=$(cat ./assets/teamid.txt)
          mkdir -p public/cal

          echo "BEGIN:VCALENDAR" > $ICS_FILE
          echo "VERSION:2.0" >> $ICS_FILE
          echo "PRODID:-//GitHub Actions//Football Fixtures//EN" >> $ICS_FILE

          # Generate events
          jq -c --arg team_id "$TEAM_ID" '
            .response[]
            | select(.teams.home.id == ($team_id|tonumber) or .teams.away.id == ($team_id|tonumber))
          ' tmp/fixtures.json | while read fx; do
            DATE=$(echo "$fx" | jq -r '.fixture.date' | cut -d+ -f1)
            START=$(date -u -d "$DATE" +%Y%m%dT%H%M%SZ)
            END=$(date -u -d "$DATE +2 hours" +%Y%m%dT%H%M%SZ)

            HOME=$(echo "$fx" | jq -r '.teams.home.name')
            AWAY=$(echo "$fx" | jq -r '.teams.away.name')
            STATUS=$(echo "$fx" | jq -r '.fixture.status.short')
            SCORE=""
            if [ "$STATUS" = "FT" ]; then
              SCORE="$(echo "$fx" | jq -r '.goals.home')-$(echo "$fx" | jq -r '.goals.away')"
            fi

            if [ "$(echo "$fx" | jq -r '.teams.home.id')" = "$TEAM_ID" ]; then
              SUMMARY="$HOME $SCORE vs $AWAY"
            else
              SUMMARY="$AWAY $SCORE @ $HOME"
            fi

            LOCATION=$(echo "$fx" | jq -r '.fixture.venue.name // "Unknown"')
            REFEREE=$(echo "$fx" | jq -r '.fixture.referee // "TBD"')
            UID=$(echo "$fx" | jq -r '.fixture.id')

            cat <<EOL >> $ICS_FILE
BEGIN:VEVENT
UID:$UID@$LEAGUE_ID.football
DTSTAMP:$(date -u +%Y%m%dT%H%M%SZ)
DTSTART:$START
DTEND:$END
SUMMARY:$SUMMARY
DESCRIPTION:Referee: $REFEREE
LOCATION:$LOCATION
END:VEVENT
EOL
          done

          echo "END:VCALENDAR" >> $ICS_FILE

      - name: Commit and Push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add data/league-info.json data/previous-season/ public/cal/fixtures.ics
          if git diff --cached --quiet; then
            echo "🟢 No changes to commit."
          else
            git commit -m "Update league info, standings, and team fixtures"
            git push
