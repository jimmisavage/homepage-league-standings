name: Update Standings

on:
  workflow_dispatch:
  schedule:
    - cron: '0,30 11-21 * * *'
    - cron: '0 22 * * *'

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Load league and season info
        id: load
        run: |
          echo "üì¶ Reading cached league info..."
          cat data/league-info.json

          LEAGUE_ID=$(jq -r '.league_id' data/league-info.json)
          SEASON=$(jq -r '.season' data/league-info.json)
          LAST_SEASON=$((SEASON - 1))

          ABOVE=$((LEAGUE_ID - 1))
          BELOW=$((LEAGUE_ID + 1))

          echo "‚úÖ League ID: $LEAGUE_ID"
          echo "‚úÖ Season: $SEASON"

          echo "LEAGUE_ID=$LEAGUE_ID" >> $GITHUB_ENV
          echo "SEASON=$SEASON" >> $GITHUB_ENV
          echo "LAST_SEASON=$LAST_SEASON" >> $GITHUB_ENV
          echo "ABOVE=$ABOVE" >> $GITHUB_ENV
          echo "BELOW=$BELOW" >> $GITHUB_ENV

      - name: Fetch Current Standings
        run: |
          echo "üì• Fetching current season standings..."
          CURRENT=$(curl -s --request GET \
            --url "https://api-football-v1.p.rapidapi.com/v3/standings?season=${SEASON}&league=${LEAGUE_ID}" \
            --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
            --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com")

          echo "$CURRENT" | jq . > tmp/current-standings.json

      - name: Build Previous Season Map
        run: |
          echo "üìë Building previous season map from cache..."
            mkdir -p tmp

            TMP_MERGE="tmp/merge_parts.jsonl"
            > "$TMP_MERGE"  # start fresh

            for id in $LEAGUE_ID $ABOVE $BELOW; do
              FILE="data/previous-season/league-${id}.json"
              if [[ -f "$FILE" ]]; then
                echo "‚úÖ Found: $FILE"
                jq '
                    .response[0].league as $league |
                    $league.standings[]? |
                    .[]? |
                    {
                      "\(.team.id)": {
                        lastLeague: $league.name,
                        lastRank: .rank
                      }
                    }
                  ' "$FILE" >> "$TMP_MERGE"
              else
                echo "‚ö†Ô∏è Missing: $FILE"
              fi
            done

            if [[ -s "$TMP_MERGE" ]]; then
              jq -s 'reduce .[] as $item ({}; . * $item)' "$TMP_MERGE" > tmp/last-season-map.json
              echo "‚úÖ Last season map written to tmp/last-season-map.json"
            else
              echo "‚ùå No valid previous season data found. Exiting."
              exit 1
            fi

      - name: Fetch Upcoming Fixtures
        run: |
          echo "üìÖ Fetching upcoming fixtures..."
          START_DATE=$(date -d "+0 days" +%Y-%m-%d)
          END_DATE=$(date -d "+14 days" +%Y-%m-%d)

          FIXTURES=$(curl -s --request GET \
            --url "https://api-football-v1.p.rapidapi.com/v3/fixtures?league=${LEAGUE_ID}&season=${SEASON}&from=${START_DATE}&to=${END_DATE}" \
            --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
            --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com")

          echo "$FIXTURES" | jq . > tmp/fixtures.json

          jq -n --slurpfile f tmp/fixtures.json '
            if ($f[0].response | length) == 0 then
              {"TBD": {nextUp: "TBD"}}
            else
              $f[0].response
              | sort_by(.fixture.date)
              | reduce .[] as $fx ({};
                  . +
                  {
                    ($fx.teams.home.id|tostring):
                      (if has($fx.teams.home.id|tostring) then .[$fx.teams.home.id|tostring] else {nextUp: "\($fx.teams.away.name) (H)"} end),
                    ($fx.teams.away.id|tostring):
                      (if has($fx.teams.away.id|tostring) then .[$fx.teams.away.id|tostring] else {nextUp: "\($fx.teams.home.name) (A)"} end)
                  }
                )
            end
          ' > tmp/next-fixtures-map.json

      - name: Build Final standings.json
        run: |
          TEAM_ID=$(cat ./assets/teamid.txt)

          jq --argjson teamId "$TEAM_ID" \
             --slurpfile last tmp/last-season-map.json \
             --slurpfile fixtures tmp/next-fixtures-map.json '
            .response[0].league.standings[0] |= map(
              . + {
                highlight: (if .team.id == $teamId then true else false end),
                lastSeasonLeague: ($last[0][(.team.id|tostring)].lastLeague // "Unknown"),
                lastSeasonPosition: ($last[0][(.team.id|tostring)].lastRank // "?"),
                nextUp: ($fixtures[0][(.team.id|tostring)].nextUp // "TBD")
              }
            )
          ' tmp/current-standings.json > data/standings.json

      - name: Clean old logos
        run: |
          echo "üßπ Cleaning old logos"
          rm -rf assets/logos

      - name: Download team icons
        run: |
          mkdir -p assets/logos
          jq -r '.response[0].league.standings[0][] | "\(.team.id) \(.team.logo)"' data/standings.json |
          while read -r id url; do
            echo "üñºÔ∏è  Downloading logo for team $id"
            curl -s -o "assets/logos/${id}.png" "$url"
          done

      - name: Download league icon
        run: |
          curl -s -o league-icon.png "https://media.api-sports.io/football/leagues/${LEAGUE_ID}.png"

      - name: Commit and Push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add data/standings.json tmp/current-standings.json assets/logos/ league-icon.png
          if git diff --cached --quiet; then
            echo "üü¢ No changes to commit."
          else
            git commit -m "Update standings with cached league info and previous season stats"
            git push
          fi
