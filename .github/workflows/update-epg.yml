name: Update EPG

on:
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate-epg:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install Python Dependencies
        run: pip install beautifulsoup4 requests python-dateutil
      - name: Generate EPG File
        shell: python
        run: |
          import json
          import os
          from datetime import datetime, timedelta, timezone
          from zoneinfo import ZoneInfo # <-- Import the timezone library

          LEAGUE_ID_NAME = os.environ.get('LEAGUE_ID_NAME')

          def create_epg():
              try:
                  with open('data/fixtures.json', 'r') as f:
                      fixtures_data = json.load(f)
              except (IOError, KeyError, IndexError):
                  print("‚ùå Fixtures data not found. Cannot generate EPG.")
                  return
              
              # --- Get a set of all teams from the fixtures ---
              all_teams = set()
              for fix in fixtures_data:
                  all_teams.add(fix['home_team'])
                  all_teams.add(fix['away_team'])

              # --- Define the correct UK timezone ---
              uk_tz = ZoneInfo("Europe/London")
              now_local = datetime.now(timezone.utc).astimezone(uk_tz)
              future_limit = now_local + timedelta(days=60)
              
              xml = '<?xml version="1.0" encoding="UTF-8"?>\n<tv>'
              team_fixtures = {team: [] for team in all_teams}
              for fix in fixtures_data:
                  team_fixtures.setdefault(fix['home_team'], []).append(fix)
                  team_fixtures.setdefault(fix['away_team'], []).append(fix)

              for team_name in sorted(all_teams):
                  team_slug = ''.join(c for c in team_name.lower().replace('&', 'and').replace(' ', '-') if c.isalnum() or c == '-')
                  xml += f'\n  <channel id="{team_slug}.uk"><display-name lang="en">{team_name}</display-name></channel>'
                  
                  sorted_fixtures = sorted(team_fixtures.get(team_name, []), key=lambda x: x['datetime_utc'])
                  
                  next_game_start_utc = datetime.fromisoformat(sorted_fixtures[0]['datetime_utc'].replace('Z', '+00:00')) if sorted_fixtures else None
                  next_game_start_local = next_game_start_utc.astimezone(uk_tz) if next_game_start_utc else None

                  stop_time = next_game_start_local if next_game_start_local else future_limit
                  if stop_time > now_local:
                      start_str = now_local.strftime('%Y%m%d%H%M%S %z')
                      stop_str = stop_time.strftime('%Y%m%d%H%M%S %z')
                      xml += f'\n  <programme start="{start_str}" stop="{stop_str}" channel="{team_slug}.uk"><title lang="en">No Game Scheduled</title></programme>'
                  
                  for fixture in sorted_fixtures:
                      home_team, away_team = fixture['home_team'], fixture['away_team']
                      is_home_game = team_name == home_team
                      opponent, venue = (away_team, "(H)") if is_home_game else (home_team, "(A)")
                      
                      # --- Convert each game's time to the UK timezone ---
                      dt_start_utc = datetime.fromisoformat(fixture['datetime_utc'].replace('Z', '+00:00'))
                      dt_start_local = dt_start_utc.astimezone(uk_tz)
                      dt_stop_local = dt_start_local + timedelta(hours=2)
                      start_str = dt_start_local.strftime('%Y%m%d%H%M%S %z')
                      stop_str = dt_stop_local.strftime('%Y%m%d%H%M%S %z')
                      
                      xml += f'\n  <programme start="{start_str}" stop="{stop_str}" channel="{team_slug}.uk"><title lang="en">vs. {opponent} {venue}</title><desc lang="en">{fixture.get("competition", "")}</desc><category lang="en">Sports</category></programme>'
              
              xml += '\n</tv>'
              with open('epg.xml', 'w', encoding='utf-8') as f: f.write(xml)
              print("‚úÖ EPG file generated successfully.")

          create_epg()
          
      - name: Commit and Push EPG
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add epg.xml
          if git diff --staged --quiet;
            then echo "üü¢ No changes to EPG.";
            else git commit -m "üóìÔ∏è Automated EPG update"; git push;
          fi
